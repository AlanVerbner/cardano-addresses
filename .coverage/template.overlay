module "Cardano.Address" {
  tick function "showsPrec" [Show instance];
  tick function "compare" [Ord instance];
  tick function "==" [Eq instance];
  inside "invariantSize" {
    tick "otherwise" [Invariant];
  }
  inside "invariantNetworkTag" {
    tick "otherwise" [Invariant];
  }
}

module "Cardano.Address.Derivation" {
  tick function "showsPrec" [Show instance];
  tick function "compare" [Ord instance];
  tick function "==" [Eq instance];
  tick "getIndex" [Record Accessor];
}

module "Cardano.Address.Style.Byron" {
  tick function "showsPrec" [Show instance];
  tick function "==" [Eq instance];
  tick "()" [Never evaluated];
  inside "hdPassphrase" {
    tick "SHA512" [Never evaluated];
  }
  tick function "paymentAddress" [Re-Export];
  tick function "deriveAddressPrivateKey" [Re-export];
  tick function "deriveAccountPrivateKey" [Re-export];
  tick function "genMasterKeyFromXPrv" [Re-export];
  tick function "genMasterKeyFromMnemonic" [Re-export];
}

module "Cardano.Address.Style.Icarus" {
  tick function "showsPrec" [Show instance];
  tick function "=="  [Eq instance];

  tick function "paymentAddress" [Re-Export];
  tick function "deriveAddressPrivateKey" [Re-export];
  tick function "deriveAddressPublicKey" [Re-export];
  tick function "deriveAccountPrivateKey" [Re-export];
  tick function "genMasterKeyFromXPrv" [Re-export];
  tick function "genMasterKeyFromMnemonic" [Re-export];

  inside "unsafeGenerateKeyFromHardwareLedger" {
    tick "(error \"pruneBuffer: no first byte\")" [Invariant];
    tick "(error \"pruneBuffer: no last byte\")" [Invariant];
    tick "(Left \"invalid xprv\")" [Invariant];
    tick "error" [Invariant];
    tick "SHA512" [Never evaluated];
  }
}

module "Cardano.Address.Style.Shelley" {
  tick function "showsPrec" [Show instance];
  tick function "=="  [Eq instance];

  tick function "paymentAddress" [Re-Export];
  tick function "delegationAddress" [Re-Export];
  tick function "deriveStakingPrivateKey" [Re-export];
  tick function "deriveAddressPrivateKey" [Re-export];
  tick function "deriveAddressPublicKey" [Re-export];
  tick function "deriveAccountPrivateKey" [Re-export];
  tick function "genMasterKeyFromXPrv" [Re-export];
  tick function "genMasterKeyFromMnemonic" [Re-export];

  inside "publicKeyHashSize" {
    tick "Blake2b_224" [Never evaluated];
  }
}

module "Cardano.Address.Style.Jormungandr" {
  tick function "showsPrec" [Show instance];
  tick function "=="  [Eq instance];

  tick function "paymentAddress" [Re-Export];
  tick function "delegationAddress" [Re-Export];
  tick function "deriveStakingPrivateKey" [Re-export];
  tick function "deriveAddressPrivateKey" [Re-export];
  tick function "deriveAddressPublicKey" [Re-export];
  tick function "deriveAccountPrivateKey" [Re-export];
  tick function "genMasterKeyFromXPrv" [Re-export];
  tick function "genMasterKeyFromMnemonic" [Re-export];
}

module "Cardano.Mnemonic" {
  tick function "showsPrec" [Show instance];
  tick function "==" [Eq instance];
  tick "Proxy" [Never evaluated];
  tick "(Proxy :: Proxy n)" [Never evaluated];
  tick "(Proxy :: Proxy rest)" [Never evaluated];
  tick "(Proxy :: Proxy mw)" [Never evaluated];
  tick "(Proxy :: Proxy (mw ': rest))" [Never evaluated];

  inside "genEntropy" {
    tick "(throwM . UnexpectedEntropyError)" on line 208 [Invariant];
  }
}

module "Command" {
  tick function "showsPrec" [Show instance];
}

module "Command.RecoveryPhrase" {
  tick function "showsPrec" [Show instance];
}

module "Command.RecoveryPhrase.Generate" {
  tick function "showsPrec" [Show instance];
  tick "size" [Record Accessor"];
}

module "Command.Key" {
  tick function "showsPrec" [Show instance];
}

module "Command.Key.FromRecoveryPhrase" {
  tick function "showsPrec" [Show instance];
  tick "encoding" [Record Accessor"];
  tick "style" [Record Accessor"];
}

module "Command.Key.Child" {
  tick function "showsPrec" [Show instance];
  tick "encoding" [Record Accessor"];
  tick "scheme" [Record Accessor"];
  tick "path" [Record Accessor"];
}

module "Command.Key.Public" {
  tick function "showsPrec" [Show instance];
  tick "encoding" [Record Accessor"];
}

module "Command.Key.Inspect" {
  tick function "showsPrec" [Show instance];
}

module "Command.Address" {
  tick function "showsPrec" [Show instance];
}

module "Command.Address.Bootstrap" {
  tick function "showsPrec" [Show instance];
  tick "rootXPub" [Record Accessor"];
  tick "derivationPath" [Record Accessor"];
  tick "networkTag" [Record Accessor"];
}

module "Command.Address.Payment" {
  tick function "showsPrec" [Show instance];
  tick "networkTag" [Record Accessor"];
}

module "Command.Address.Delegation" {
  tick function "showsPrec" [Show instance];
  tick "xpub" [Record Accessor"];
}

module "Command.Address.Pointer" {
  tick function "showsPrec" [Show instance];
  tick "_slotNum" [Record Accessor"];
  tick "_transactionIndex" [Record Accessor"];
  tick "_outputIndex" [Record Accessor"];
}

module "Options.Applicative.Derivation" {
  tick function "showsPrec" [Show instance];
  tick function "==" [Eq instance];
  tick function "succ" [Enum instance];
  tick function "compare" [Ord instance];
}

module "Options.Applicative.MnemonicSize" {
  tick function "showsPrec" [Show instance];
  tick function "==" [Eq instance];
  tick function "succ" [Enum instance];
}

module "Options.Applicative.Style" {
  tick function "showsPrec" [Show instance];
  tick function "==" [Eq instance];
  tick function "succ" [Enum instance];
}

module "Codec.Binary.Encoding" {
  tick function "showsPrec" [Show instance];
  tick function "==" [Eq instance];
}

module "Data.Word7" {
  tick function "showsPrec" [Show instance];
  tick function "==" [Eq instance];
}
