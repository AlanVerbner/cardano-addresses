-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library utilities for mnemonic generation and address derivation.
--   
--   Please see the README on GitHub at
--   <a>https://github.com/input-output-hk/cardano-addresses</a>
@package cardano-addresses
@version 1.0.0


-- | This module provides mnemonic (backup phrase) creation, and conversion
--   of a mnemonic to seed for wallet restoration.
--   
--   The module uses a lot of type-level machinery to ensure that entropy
--   and mnemonic sizes are all compatible and legit. Therefore, it isn't
--   possible to generate an invalid seed by using the smart constructors
--   below, and trying to generate an entropy of an invalid size will
--   result in a runtime error.
module Cardano.Mnemonic

-- | A backup-phrase in the form of a non-empty of Mnemonic words
--   Constructor isn't exposed.
data Mnemonic (mw :: Nat)
data Entropy (n :: Nat)

-- | Smart-constructor for the Entropy
--   
--   <pre>
--   &gt;&gt;&gt; mkEntropy @(EntropySize 15) bytes
--   Entropy {} :: Entropy 160
--   </pre>
mkEntropy :: forall ent csz. (ValidEntropySize ent, ValidChecksumSize ent csz) => ByteString -> Either (EntropyError csz) (Entropy ent)

-- | Smart-constructor for <a>Mnemonic</a>. Requires a type application to
--   disambiguate the mnemonic size:
--   
--   <pre>
--   &gt;&gt;&gt; mkMnemonic @15 sentence
--   Mnemonic {} :: Mnemonic 15
--   </pre>
--   
--   <b>Property</b>:
--   
--   <pre>
--   mkMnemonic (mnemonicToText mnemonic) == Right mnemonic
--   </pre>
mkMnemonic :: forall mw ent csz. (ConsistentEntropy ent mw csz, EntropySize mw ~ ent) => [Text] -> Either (MnemonicError csz) (Mnemonic mw)

-- | Generate Entropy of a given size using a random seed.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; genEntropy @(EntropySize 12)
--   Entropy {} :: Entropy 128
--   </pre>
genEntropy :: forall ent csz. (ValidEntropySize ent, ValidChecksumSize ent csz) => IO (Entropy ent)
data SomeMnemonic
[SomeMnemonic] :: forall mw. KnownNat mw => Mnemonic mw -> SomeMnemonic

-- | This class enables caller to parse text list of variable length into
--   mnemonic sentences.
--   
--   Note that the given <a>Nat</a>s **have** to be valid mnemonic sizes,
--   otherwise the underlying code won't even compile, with not-so-friendly
--   error messages.
class FromMnemonic (sz :: [Nat])
fromMnemonic :: FromMnemonic sz => [Text] -> Either (FromMnemonicError sz) SomeMnemonic

-- | Error reported from trying to create a passphrase from a given
--   mnemonic
newtype FromMnemonicError (sz :: [Nat])
FromMnemonicError :: String -> FromMnemonicError
[getFromMnemonicError] :: FromMnemonicError -> String

-- | This wraps errors from <a>Cardano.Encoding.BIP39</a>
data MnemonicError csz

-- | Wrong number of words in mnemonic.
ErrMnemonicWords :: MnemonicWordsError -> MnemonicError csz

-- | Invalid entropy length or checksum.
ErrEntropy :: EntropyError csz -> MnemonicError csz

-- | Invalid word in mnemonic.
ErrDictionary :: DictionaryError -> MnemonicError csz

-- | This wraps EntropyError of <a>Cardano.Encoding.BIP39</a>
newtype MnemonicException csz

-- | Invalid entropy length or checksum
UnexpectedEntropyError :: EntropyError csz -> MnemonicException csz
mnemonicToEntropy :: Mnemonic mw -> Entropy (EntropySize mw)

-- | Convert an Entropy to a corresponding Mnemonic Sentence. Since
--   <a>Entropy</a> and <a>Mnemonic</a> can only be created through
--   smart-constructors, this function cannot fail and is total.
entropyToMnemonic :: forall mw ent csz. (ValidMnemonicSentence mw, ValidEntropySize ent, ValidChecksumSize ent csz, ent ~ EntropySize mw, mw ~ MnemonicWords ent) => Entropy ent -> Mnemonic mw

-- | Convert <a>Entropy</a> to a plain bytes.
entropyToBytes :: Entropy n -> ScrubbedBytes

-- | Convert a <a>Mnemonic</a> to a sentence of English mnemonic words.
mnemonicToText :: Mnemonic mw -> [Text]
data EntropyError (csz :: Nat)
ErrInvalidEntropyLength :: Int -> Int -> EntropyError
ErrInvalidEntropyChecksum :: Checksum csz -> Checksum csz -> EntropyError
data DictionaryError
ErrInvalidDictionaryWord :: String -> DictionaryError
data MnemonicWordsError
ErrWrongNumberOfWords :: Int -> Int -> MnemonicWordsError
type ValidEntropySize (n :: Nat) = (KnownNat n, NatWithinBound Int n, Elem n 96 : 128 : 160 : 192 : 224 : 256 : ([] :: [Nat]))
type ValidChecksumSize (ent :: Nat) (csz :: Nat) = (KnownNat csz, NatWithinBound Int csz, Elem csz 3 : 4 : 5 : 6 : 7 : 8 : ([] :: [Nat]), CheckSumBits ent ~ csz)
type ValidMnemonicSentence (mw :: Nat) = (KnownNat mw, NatWithinBound Int mw, Elem mw 9 : 12 : 15 : 18 : 21 : 24 : ([] :: [Nat]))
type ConsistentEntropy (ent :: Nat) (mw :: Nat) (csz :: Nat) = (ValidEntropySize ent, ValidChecksumSize ent csz, ValidMnemonicSentence mw, MnemonicWords ent ~ mw)
type family CheckSumBits (n :: Nat) :: Nat
type family EntropySize (n :: Nat) :: Nat
type family MnemonicWords (n :: Nat) :: Nat
instance Formatting.Buildable.Buildable (Cardano.Mnemonic.FromMnemonicError sz)
instance GHC.Show.Show (Cardano.Mnemonic.FromMnemonicError sz)
instance GHC.Classes.Eq (Cardano.Mnemonic.FromMnemonicError sz)
instance GHC.Show.Show (Cardano.Mnemonic.MnemonicError csz)
instance GHC.Classes.Eq (Cardano.Mnemonic.MnemonicError csz)
instance GHC.Show.Show (Cardano.Mnemonic.MnemonicException csz)
instance GHC.Show.Show (Cardano.Mnemonic.Mnemonic mw)
instance GHC.Classes.Eq (Cardano.Mnemonic.Mnemonic mw)
instance GHC.Classes.Eq (Crypto.Encoding.BIP39.EntropyError czs)
instance GHC.Classes.Eq Crypto.Encoding.BIP39.MnemonicWordsError
instance GHC.Classes.Eq Crypto.Encoding.BIP39.Dictionary.DictionaryError
instance GHC.Show.Show Cardano.Mnemonic.SomeMnemonic
instance (n Data.Type.Equality.~ Crypto.Encoding.BIP39.EntropySize mw, csz Data.Type.Equality.~ Crypto.Encoding.BIP39.CheckSumBits n, Crypto.Encoding.BIP39.ConsistentEntropy n mw csz, Cardano.Mnemonic.FromMnemonic rest, Cardano.Mnemonic.NatVals rest) => Cardano.Mnemonic.FromMnemonic (mw : rest)
instance Cardano.Mnemonic.NatVals '[]
instance (GHC.TypeNats.KnownNat n, Cardano.Mnemonic.NatVals rest) => Cardano.Mnemonic.NatVals (n : rest)
instance (n Data.Type.Equality.~ Crypto.Encoding.BIP39.EntropySize mw, csz Data.Type.Equality.~ Crypto.Encoding.BIP39.CheckSumBits n, Crypto.Encoding.BIP39.ConsistentEntropy n mw csz) => Cardano.Mnemonic.FromMnemonic '[mw]
instance GHC.Classes.Eq Cardano.Mnemonic.SomeMnemonic
instance GHC.TypeNats.KnownNat csz => GHC.Exception.Type.Exception (Cardano.Mnemonic.MnemonicException csz)
